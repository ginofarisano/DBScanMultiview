par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
#tanti colori
colors <- rainbow(100)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-6000, yrange[2]-0.2, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
#tanti colori
colors <- rainbow(50)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-6000, yrange[2]-0.2, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
minPTSStop-minPTSStart
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-6000, yrange[2]-0.2, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
####################### DISEGNO PLOT WITH LINE  ######################
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2], paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]-0.5, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.5, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.2, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
# get the range for the x and y axis
xrange <- range(1,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.1, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
View(eps1Iteration)
#SE SI VUOLE ZOOMMARE SU UN PARTICOLARE AREA SOSTITUIRE IN xrange <- range(1,length(result)), 1 CON UN VALORE PIU' ALTO
# get the range for the x and y axis
xrange <- range(45431,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.1, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
####################### DISEGNO PLOT WITH LINE  ######################
#SE SI VUOLE ZOOMMARE SU UN PARTICOLARE AREA SOSTITUIRE IN xrange <- range(1,length(result)), 1 CON UN VALORE PIU' ALTO
# get the range for the x and y axis
xrange <- range(45431,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(1,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
#text(myLabels1, par("usr")[3]+0.09 , labels = rep("|",length(myLabels1)), srt = 0, pos = 1, xpd = TRUE,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.1, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
####################### DISEGNO PLOT WITH LINE  ######################
#VUOI PLOTTARE DA UN CERTO PUNTO IN POI?
starPlot<-45431
# get the range for the x and y axis
xrange <- range(starPlot,length(result))
#xrange <- setNames(xrange, paste(dataUnionOrIntersection[,1],dataUnionOrIntersection[,2])) <-
indexGood<-which(result!=-10)
yrange <- range(min(result[indexGood]),max(result))
original.parameters<-par()
par(xaxt="n")
pdf(paste(pathOutputPDF,"andamentoMinPts",".pdf",sep = ""))
#andamento indici DB
plot(xrange,yrange,ylab="DB",xlab="",main="Davies-Bouldin's index",type="n",xaxt="n")
minPTS1 = dataUnionOrIntersection[,1]
minPTS2 = dataUnionOrIntersection[,2]
myLabels1=seq(starPlot,numberOfIterations,10000)
original.parameters<-par()
axis(1, at=myLabels1,labels=rep("",length(myLabels1)),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
text(myLabels1, par("usr")[3] - 0.4, labels = minPTS1[myLabels1], srt = 45, pos = 1, xpd = TRUE,cex = 0.7)
text(myLabels1, par("usr")[3] - 0.2, labels = minPTS2[myLabels1], srt = 45, pos = 1, xpd = TRUE,,cex = 0.7)
colors <- rainbow((minPTSStop-minPTSStart)+1)
plotchar <- seq(1,(minPTSStop-minPTSStart)+1,1)
linetype <- rep(1,(minPTSStop-minPTSStart)+1)
# add lines
for (i in minPTSStart:minPTSStop) {
#li seleziono per minPts
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
x<-indexMinPts[seq(1,length(indexMinPts),1)]
y<-result[indexMinPts[seq(1,length(indexMinPts),1)]]
#per non appesantire il grafico levo i risultati che non mi piacciono
indexGoodY<-which(y!=-10)
lines(x[indexGoodY],y[indexGoodY], type="b", lwd=1.5,
lty=1, col=colors[(i-minPTSStart)+1],pch=plotchar[(i-minPTSStart)+1])
}
# add a legend
legend(xrange[2]-7000, yrange[2]+0.1, paste("MinPts",minPTSStart:minPTSStop), cex=0.5, col=colors,pt.cex = 1,pch=plotchar, lty=1, text.font=4)
dev.off()
####################### DISEGNO PLOT WITH LINE  ######################
xAxis
#questo script legge i risultati prodotti dall'algoritmo DBScanMultiview e produce in output
#un' analisi dei risultati
#ATTENZIONE: QUESTO SCRIPT DEVE ESSERE ESEGUITO DOPO AVER LANCIATO CleanFiles.R (L'OUTPUT DI DBScanMultiview CONTIENE MOLTI
#RISULTATI INUTILI CHE E' MEGLIO SCARTARE...LA PATH DI resultDBSCAN DEVE ESSERE howToSave IN CleanFiles.R )
library(clusterSim)
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#modificare i due valori in base a quelli impostati in DBScanMultiview
minPTSStart = 4
minPTSStop = 25
#dove stampo i risultati?
pathOutputPDF = "~/git/DBScanMultiview/dataset1intersection/"
#dataset iniziale
dataset1 <- "~/git/DBScanMultiview/kmeans_miRNASeq_centers.txt"
#dataset1 <- "~/git/DBScanMultiview/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview
#resultDBSCAN <- "~/git/DBScanMultiview/outputForExcelUnion.csv"
resultDBSCAN <- "~/git/DBScanMultiview/outputForExcelIntersNew.csv"
#quanti plot che hanno il miglior risultato voglio salvare?
numberOfPlotBest<-3
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
####################### LETTURA DATI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
dataUnionOrIntersection <- read.table(resultDBSCAN, header=FALSE, sep=";")
#prendo la quarta colonna che sono i clusters
clustersUnionOrIntersection <- dataUnionOrIntersection[,4]
#altre colonne
eps1Iteration <- dataUnionOrIntersection[,1]
eps2Iteration <- dataUnionOrIntersection[,2]
minPtsIteration <- dataUnionOrIntersection[,3]
#altre colonne
numberOfIterations=length(dataUnionOrIntersection[,4])
####################### LETTURA DATI ######################
####################### CALCOLO DB INDEX ######################
#stampo i risultadi del DB index
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
#Davies-Bouldin index (il cluster 0 è rumore pertanto aggiungo sempre +1-> a index.DB altrimenti non gli piace)
index_res = index.DB(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res$DB)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO DB INDEX ######################
####################### VALUTAZIONE DB INDEX: a volte da NaN ######################
#indici Na (probabilmente perchè tutti i punti sono nello stesso cluster)
indexBad = which(is.na(result)==TRUE)
#indici buoni
indexGood = which(is.na(result)==FALSE)
minValue<-min(result[indexGood])
minIndex<-which(result==min(result[indexGood]))
####################### VALUTAZIONE DB INDEX: a volte da NaN ######################
####################### STAMPO IL MINIMO ######################
for(myMinIndex in minIndex)
print(paste(dataUnionOrIntersection[myMinIndex,1],dataUnionOrIntersection[myMinIndex,2],dataUnionOrIntersection[myMinIndex,3],dataUnionOrIntersection[myMinIndex,4],result[myMinIndex]))
dataframe<-data.frame(dataUnionOrIntersection[minIndex,1],dataUnionOrIntersection[minIndex,2],dataUnionOrIntersection[minIndex,3],dataUnionOrIntersection[minIndex,4],result[minIndex])
colnames(dataframe)<-c("eps1","eps2","minPts","Cluster","Db index")
write.table(dataframe,file=paste(pathOutputPDF,"minimo.csv"),row.names = FALSE,sep=",",quote=FALSE)
####################### STAMPO IL MINIMO ######################
####################### STAMPO PER ORDINE DB ######################
xAxis<-c()
yAxis <-c()
contigencyTableAll <- c()
rowNumberInResults <- c()
for(index in indexGood){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
cluster = as.vector(clustersUnionOrIntersection[index])
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#costruisco una tabella di contingenza e la trasformo in un dataframe
contigencyTable<-as.data.frame(table(myCluster))
#asse x
xAxis<-c(xAxis,numsClust<-max(as.numeric(contigencyTable[,1])))
#asse y
yAxis <-c(yAxis,result[index])
contigencyTableCluster <- c()
for(row in 1:dim(contigencyTable)[1]){
contigencyTableCluster <-c(contigencyTableCluster, paste(contigencyTable[row,1],":",contigencyTable[row,2]))
}
contigencyTableAll <- c(contigencyTableAll,paste(contigencyTableCluster,collapse = ","))
rowNumberInResults <- c(rowNumberInResults,index)
}
pdf(paste(sep="",pathOutputPDF,"plot1.pdf"))
plot(xAxis, yAxis, xlab="Number of clusters", ylab="DB", ,main="Davies-Bouldin's index (for number of clusters)")
dev.off()
xAxis
pdf(paste(sep="",pathOutputPDF,"plot1.pdf"))
plot(xAxis, yAxis,  xaxt="n",xlab="Number of clusters", ylab="DB", ,main="Davies-Bouldin's index (for number of clusters)")
axis(1, at=unique(xAxis),labels=unique(xAxis), las=2, cex.axis=0.7, tck=-.01)
dev.off()
pdf(paste(sep="",pathOutputPDF,"plot1.pdf"))
plot(xAxis, yAxis,  xaxt="n",xlab="Number of clusters", ylab="DB", ,main="Davies-Bouldin's index (for number of clusters)")
axis(1, at=unique(xAxis),labels=unique(xAxis))
dev.off()
pwd()
setwd("~/Desktop/progetto IAC/singleView correlation1")
