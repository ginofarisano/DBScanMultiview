minPtsIteration <- dataUnionOrIntersection[,3]
#altre colonne
numberOfIterations=length(dataUnionOrIntersection[,4])
####################### LETTURA DATI ######################
####################### CALCOLO DB INDEX ######################
#stampo i risultadi del DB index
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
#Davies-Bouldin index (il cluster 0 è rumore pertanto aggiungo sempre +1-> a index.DB altrimenti non gli piace)
index_res = index.DB(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res$DB)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO DB INDEX ######################
####################### VALUTAZIONE DB INDEX: a volte da NaN ######################
#indici Na (probabilmente perchè tutti i punti sono nello stesso cluster)
indexBad = which(is.na(result)==TRUE)
#indici buoni
indexGood = which(is.na(result)==FALSE)
minValue<-min(result[indexGood])
minIndex<-which(result==min(result[indexGood]))
####################### VALUTAZIONE DB INDEX: a volte da NaN ######################
####################### STAMPO IL MINIMO ######################
for(myMinIndex in minIndex)
print(paste(dataUnionOrIntersection[myMinIndex,1],dataUnionOrIntersection[myMinIndex,2],dataUnionOrIntersection[myMinIndex,3],dataUnionOrIntersection[myMinIndex,4],result[myMinIndex]))
dataframe<-data.frame(dataUnionOrIntersection[minIndex,1],dataUnionOrIntersection[minIndex,2],dataUnionOrIntersection[minIndex,3],dataUnionOrIntersection[minIndex,4],result[minIndex])
colnames(dataframe)<-c("eps1","eps2","minPts","Cluster","Db index")
write.table(dataframe,file=paste(pathOutputPDF,"minimo.csv"),row.names = FALSE,sep=",",quote=FALSE)
####################### STAMPO IL MINIMO ######################
####################### STAMPO PER ORDINE DB ######################
xAxis<-c()
yAxis <-c()
contigencyTableAll <- c()
rowNumberInResults <- c()
clusterData<-c()
for(index in indexGood){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
cluster = as.vector(clustersUnionOrIntersection[index])
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#costruisco una tabella di contingenza e la trasformo in un dataframe
clusterData<-c(clusterData,cluster)
contigencyTable<-as.data.frame(table(myCluster))
#asse x
xAxis<-c(xAxis,numsClust<-max(as.numeric(contigencyTable[,1])))
#asse y
yAxis <-c(yAxis,result[index])
contigencyTableCluster <- c()
for(row in 1:dim(contigencyTable)[1]){
contigencyTableCluster <-c(contigencyTableCluster, paste(contigencyTable[row,1],":",contigencyTable[row,2]))
}
contigencyTableAll <- c(contigencyTableAll,paste(contigencyTableCluster,collapse = ","))
rowNumberInResults <- c(rowNumberInResults,index)
}
pdf(paste(sep="",pathOutputPDF,"plot1.pdf"))
plot(xAxis, yAxis,  xaxt="n",xlab="Number of clusters", ylab="DB", ,main="Davies-Bouldin's index (for number of clusters)")
axis(1, at=unique(xAxis),labels=unique(xAxis))
dev.off()
fd <- data.frame(xAxis,yAxis,contigencyTableAll,rowNumberInResults,clusterData)
colnames(fd)<-c("Numero di Clusters","DB index","Individui per cluster (Numero cluster: numero elementi)","Numero di riga","Cluster")
View(fd)
#ordino per DB prendo e prendo i tre più piccoli DB per numero di clusters
#ne metto
order.pop <- order(fd$`Numero di Clusters`,fd$`DB index`)
View(fd[order.pop,])
write.csv(fd[order.pop,],sep = ";",file=paste(pathOutputPDF,"DBOrdered.csv",sep=""))
####################### STAMPO PER ORDINE DB ######################
####################### STAMPO PER ORDINE DB DIVISI PER CLASSI ######################
#numero di cluster massimo
maxNumberOfCluster<- max(xAxis)
#tanti contatori quanti sono i clusters possibili in output
listOfCounter<- c(rep(0,maxNumberOfCluster))
myListOfIndexBest <-c()
firstIteration = TRUE
for(index in order.pop)
#mi interessa da due cluster in poi
for(number in 2:maxNumberOfCluster){
#ne prendo 3 per ogni classe di cluster
#molti dei cluster sono uguali quindi ci metto l'ulteriore vincolo che 2 cluster
#non devono essere uguali
#  modificare listOfCounter[number]<3 se invece dei 3 migliori se ne vogliono prendere di più o di meno
if(fd[index,1]==number && listOfCounter[number]<numberOfPlotBest && length(intersect(fd[index,3],fd[myListOfIndexBest,3]))==0){
myListOfIndexBest <- c(myListOfIndexBest,index)
listOfCounter[number]= listOfCounter[number]+1
break
}
}
View(fd[myListOfIndexBest,])
write.csv(fd[myListOfIndexBest,],sep = ";",file=paste(pathOutputPDF,"DBOrdered3ForClass.csv",sep=""))
#per i migliori disegno un grafico
group <- 0
stringPie <- "pie"
forPrintPDFPieCounter <- 1
pdf(paste(pathOutputPDF,stringPie,forPrintPDFPieCounter,".pdf",sep = ""),width=15, height=6)
par(mfrow=c(1,3))
for(index in fd[myListOfIndexBest,4]){
if(group==3){
dev.off()
forPrintPDFPieCounter = forPrintPDFPieCounter + 1
pdf(paste(pathOutputPDF,stringPie,forPrintPDFPieCounter,".pdf",sep = ""),width=15, height=6)
par(mfcol=c(1,3))
group <- 0
}
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
cluster = as.vector(clustersUnionOrIntersection[index])
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#costruisco una tabella di contingenza ela trasformo in un dataframe
contigencyTable<-as.data.frame(table(myCluster))
print(contigencyTable)
freqRel <- round(contigencyTable[,2]/sum(contigencyTable[,2])*100,1)
pi<-pie(freqRel,labels=paste("Cluster",1:length(freqRel),",",freqRel,"%"),main = paste(dataUnionOrIntersection[index,1],dataUnionOrIntersection[index,2],dataUnionOrIntersection[index,3]))
group=group+1
}
dev.off()
####################### STAMPO PER ORDINE DB DIVISI PER CLASSI ######################
####################### BOXPLOT WITH LABEL ######################
source("boxPlot.R")
colors <- rainbow((minPTSStop-minPTSStart))
pdf(paste(pathOutputPDF,"boxPlotWithLabel",".pdf",sep = ""))
#par(mfrow=c(2,2))
maxDB=max(result)
minDB=min(result)
count<-0
# add lines
for (i in minPTSStart:minPTSStop) {
#CleanFiles.R è implementato in modo da evitare clusters ridondanti
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
df <- data.frame(result[indexMinPts],clustersUnionOrIntersection[indexMinPts])
row.names(df) <- paste(eps1Iteration[indexMinPts],eps2Iteration[indexMinPts])
print(paste("MinPTS",i))
if(length(indexMinPts))
plot.boxplot(df,1,names=paste("MinPts=",i),color=colors[i],limMin=minDB-1,limMax=maxDB+1)
count <- count + 1
}
dev.off()
####################### BOXPLOT WITH LABEL ######################
####################### BOXPLOT WITHOUT LABEL ######################
source("boxPlot.R")
colors <- rainbow((minPTSStop-minPTSStart))
pdf(paste(pathOutputPDF,"boxPlotWithOutLabal",".pdf",sep = ""))
par(mfrow=c(3,3))
maxDB=max(result)
minDB=min(result)
# add lines
for (i in minPTSStart:minPTSStop) {
#CleanFiles.R è implementato in modo da evitare clusters ridondanti
indexMinPts <- which(dataUnionOrIntersection[,3]==paste("minPts=",i,sep = ""))
df <- data.frame(result[indexMinPts],clustersUnionOrIntersection[indexMinPts])
if(length(indexMinPts))
plot.boxplot(df,1,names=paste("MinPts=",i),color=colors[i],limMin=minDB-1,limMax=maxDB+1,labelFlag=FALSE)
}
dev.off()
####################### BOXPLOT WITHOUT LABEL ######################
#calcola calcola un indice di bontà dei cluster a seconda della correlazione nei cluster e fuori dai cluster.
source("clustering_summary.R")
# #' A MVDA Function
# #'
# #' This function evaluate the summary intdex for a clustering results
# #' @param DB your matrix dataset
# #' @param cluster is a numeric vector of clustering results
# #' @keywords clustering evaluation
# #' @return a vector of evaluation indexes
# #' @export
#
#
# clustering_summary <- function(DB, cluster){
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#correlation1
dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNASeq_centers.txt"
#correlation2
#dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview: prendo solo i migliori quindi sotto inserire la path del file DBOrdered3ForClass.csv
resultDBSCAN <- "~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv"
#dove stampo i risultati?
pathOutputPDF = "~/Desktop/progetto IAC/multiViewUnionCorrelation1/"
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
dataUnionOrIntersection <- read.table(resultDBSCAN, header=FALSE, sep=";")
View(dataUnionOrIntersection)
#leggo i risultati dell'unione o intersezione
dataUnionOrIntersection <- read.table(resultDBSCAN, header=TRUE, sep=";")
View(dataUnionOrIntersection)
dataUnionOrIntersection[length(dataUnionOrIntersection)]
dataUnionOrIntersection[1,1]
DBOrdered3ForClass <- read.csv("~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv")
View(DBOrdered3ForClass)
DBOrdered3ForClass <- read.csv("~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv")
DBOrdered3ForClass <- read.csv("~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv", row.names=1)
View(DBOrdered3ForClass)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN)
DBOrdered3ForClass <- dataUnionOrIntersection[,5]
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN)
myCluster <- DBOrdered3ForClass[,4]
myCluster[1]
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN)
myCluster <- DBOrdered3ForClass[,5]
myCluster[1]
myCluster[2]
View(DBOrdered3ForClass)
DBOrdered3ForClass <- read.csv("~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv", row.names=1)
View(DBOrdered3ForClass)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
myCluster <- DBOrdered3ForClass[,5]
View(myCluster)
myCluster[1]
lenght(clustersUnionOrIntersection)
length(clustersUnionOrIntersection)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(dataUnionOrIntersection[,5])
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(clustersUnionOrIntersection)
length(clustersUnionOrIntersection)
#stampo i risultadi del DB index
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
#Davies-Bouldin index (il cluster 0 è rumore pertanto aggiungo sempre +1-> a index.DB altrimenti non gli piace)
index_res = index.DB(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res$DB)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
myCluster
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
#calcola calcola un indice di bontà dei cluster a seconda della correlazione nei cluster e fuori dai cluster.
source("clustering_summary.R")
# #' A MVDA Function
# #'
# #' This function evaluate the summary intdex for a clustering results
# #' @param DB your matrix dataset
# #' @param cluster is a numeric vector of clustering results
# #' @keywords clustering evaluation
# #' @return a vector of evaluation indexes
# #' @export
#
#
# clustering_summary <- function(DB, cluster){
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#correlation1
dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNASeq_centers.txt"
#correlation2
#dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview: prendo solo i migliori quindi sotto inserire la path del file DBOrdered3ForClass.csv
resultDBSCAN <- "~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv"
#dove stampo i risultati?
pathOutputPDF = "~/Desktop/progetto IAC/multiViewUnionCorrelation1/"
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
####################### LETTURA DATI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(clustersUnionOrIntersection)
####################### LETTURA DATI ######################
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
#calcola calcola un indice di bontà dei cluster a seconda della correlazione nei cluster e fuori dai cluster.
source("clustering_summary.R")
source("findCenter.R")
# #' A MVDA Function
# #'
# #' This function evaluate the summary intdex for a clustering results
# #' @param DB your matrix dataset
# #' @param cluster is a numeric vector of clustering results
# #' @keywords clustering evaluation
# #' @return a vector of evaluation indexes
# #' @export
#
#
# clustering_summary <- function(DB, cluster){
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#correlation1
dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNASeq_centers.txt"
#correlation2
#dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview: prendo solo i migliori quindi sotto inserire la path del file DBOrdered3ForClass.csv
resultDBSCAN <- "~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv"
#dove stampo i risultati?
pathOutputPDF = "~/Desktop/progetto IAC/multiViewUnionCorrelation1/"
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
####################### LETTURA DATI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(clustersUnionOrIntersection)
####################### LETTURA DATI ######################
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
setwd("~/Desktop/progetto IAC/MVDA")
setwd("~/Desktop/progetto IAC/MVDA/R")
#calcola calcola un indice di bontà dei cluster a seconda della correlazione nei cluster e fuori dai cluster.
# #' A MVDA Function
# #'
# #' This function evaluate the summary intdex for a clustering results
# #' @param DB your matrix dataset
# #' @param cluster is a numeric vector of clustering results
# #' @keywords clustering evaluation
# #' @return a vector of evaluation indexes
# #' @export
#
#
# clustering_summary <- function(DB, cluster){
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#correlation1
dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNASeq_centers.txt"
#correlation2
#dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview: prendo solo i migliori quindi sotto inserire la path del file DBOrdered3ForClass.csv
resultDBSCAN <- "~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv"
#dove stampo i risultati?
pathOutputPDF = "~/Desktop/progetto IAC/multiViewUnionCorrelation1/"
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
####################### LETTURA DATI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(clustersUnionOrIntersection)
####################### LETTURA DATI ######################
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
install.packages("clv")
#calcola calcola un indice di bontà dei cluster a seconda della correlazione nei cluster e fuori dai cluster.
# #' A MVDA Function
# #'
# #' This function evaluate the summary intdex for a clustering results
# #' @param DB your matrix dataset
# #' @param cluster is a numeric vector of clustering results
# #' @keywords clustering evaluation
# #' @return a vector of evaluation indexes
# #' @export
#
#
# clustering_summary <- function(DB, cluster){
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
#correlation1
dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNASeq_centers.txt"
#correlation2
#dataset1 <- "~/Desktop/progetto IAC/kmeans_miRNA_centers.txt"
#output risulatati DBScanMultiview: prendo solo i migliori quindi sotto inserire la path del file DBOrdered3ForClass.csv
resultDBSCAN <- "~/Desktop/progetto IAC/multiViewUnionCorrelation1/DBOrdered3ForClass.csv"
#dove stampo i risultati?
pathOutputPDF = "~/Desktop/progetto IAC/multiViewUnionCorrelation1/"
####################### MODIFICARE QUESTI PARAMETRI PER ESEGUIRE L'ANALISI SU DATI DIFFERENTI ######################
####################### LETTURA DATI ######################
mydata1 = read.table(dataset1)
mydata1 = scale(mydata1)
#trasposta della matrice
mydata1 <- t(mydata1)
#trasformo in un dataframe
mydata1<-as.data.frame(mydata1)
View(mydata1)
#leggo i risultati dell'unione o intersezione
DBOrdered3ForClass <- read.csv(resultDBSCAN,row.names = 1)
clustersUnionOrIntersection <- DBOrdered3ForClass[,5]
numberOfIterations=length(clustersUnionOrIntersection)
####################### LETTURA DATI ######################
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
#stampo i risultadi di clustering_summary
result <- c()
i = 1
pb = txtProgressBar(min = 1, max = length(clustersUnionOrIntersection),style = 3)
#first dataset
for(cluster in clustersUnionOrIntersection){
#trasformo lista di stringhe del tipo "1" "0"... in 1 0
myCluster <- as.integer(unlist(strsplit(cluster," ")))
#metto delle label->vedi cl1$clustering in Example1 in http://artax.karlin.mff.cuni.cz/r-help/library/clusterSim/html/index.DB.html
myCluster <- setNames(myCluster, 1:length(myCluster))
index_res = clustering_summary(mydata1, myCluster+1)
#metto l'indice in un lista
result <- c(result,index_res)
setTxtProgressBar(pb,i)
i = i+1
}
close(pb)
####################### CALCOLO clustering_summary SU RISULUTATI MIGLIORI ######################
